

------BALANCED REVIEW TABLE------------------
DROP TABLE "YELP"."REVIEW_BALANCED";
CREATE COLUMN TABLE "YELP"."REVIEW_BALANCED"
(
"REVIEW_ID" NVARCHAR(4000) PRIMARY KEY,
"ID" INTEGER not null generated by default as IDENTITY,
"USER_ID" NVARCHAR(4000),
"BUSINESS_ID" NVARCHAR(4000),
"CITY" NVARCHAR(4000),
"REVIEW_DATE" NVARCHAR(4000),
"TEXT" CLOB MEMORY THRESHOLD 1000,
"STARS" INTEGER CS_INT
);
 
INSERT INTO "YELP"."REVIEW_BALANCED"(REVIEW_ID, USER_ID, BUSINESS_ID,CITY, REVIEW_DATE,TEXT,STARS)
select b.review_id, b.user_id, b.business_id, A.city, b.review_date, b.text, b.stars
FROM "YELP".BUSINESS A, "YELP".review B
where A.business_id = B.business_id and upper(a.city) = 'MADISON' AND B.STARS = 5 LIMIT 10000; 


INSERT INTO "YELP"."REVIEW_BALANCED"(REVIEW_ID, USER_ID, BUSINESS_ID,CITY, REVIEW_DATE,TEXT,STARS)
select b.review_id, b.user_id, b.business_id, a.city, b.review_date, b.text, b.stars
FROM "YELP".BUSINESS A, "YELP".review B
where A.business_id = B.business_id and upper(a.city) = 'MADISON' AND B.STARS = 4 LIMIT 10000; 

INSERT INTO "YELP"."REVIEW_BALANCED"(REVIEW_ID, USER_ID, BUSINESS_ID,CITY, REVIEW_DATE,TEXT,STARS)
select b.review_id, b.user_id, b.business_id, a.city, b.review_date, b.text, b.stars
FROM "YELP".BUSINESS A, "YELP".review B
where A.business_id = B.business_id and upper(a.city) = 'MADISON' AND B.STARS = 3 LIMIT 10000; 

INSERT INTO "YELP"."REVIEW_BALANCED"(REVIEW_ID, USER_ID, BUSINESS_ID,CITY, REVIEW_DATE,TEXT,STARS)
select b.review_id, b.user_id, b.business_id, a.city, b.review_date, b.text, b.stars
FROM "YELP".BUSINESS A, "YELP".review B
where A.business_id = B.business_id and upper(a.city) = 'MADISON' AND B.STARS = 2 LIMIT 10000; 

INSERT INTO "YELP"."REVIEW_BALANCED"(REVIEW_ID, USER_ID, BUSINESS_ID,CITY, REVIEW_DATE,TEXT,STARS)
select b.review_id, b.user_id, b.business_id, a.city, b.review_date, b.text, b.stars
FROM "YELP".BUSINESS A, "YELP".review B
where A.business_id = B.business_id and upper(a.city) = 'MADISON' AND B.STARS = 1 LIMIT 10000; 



DROP VIEW  "YELP"."REVIEW_VIEW";
CREATE VIEW "YELP"."REVIEW_VIEW" AS
SELECT * FROM "YELP"."REVIEW_BALANCED" ORDER BY REVIEW_ID;

----SENTIMENT TABLE FOR DOING TEXT ANALYSIS-------
DROP TABLE "YELP"."REVIEW_TRAINING";
CREATE COLUMN TABLE "YELP"."REVIEW_TRAINING"
(
"REVIEW_ID" NVARCHAR(4000) PRIMARY KEY,
"TEXT" CLOB MEMORY THRESHOLD 1000,
"STARS" INTEGER CS_INT
);

INSERT INTO "YELP"."REVIEW_TRAINING"(REVIEW_ID, TEXT, STARS) 
SELECT  REVIEW_ID, TEXT, STARS FROM  "YELP"."REVIEW_VIEW"  LIMIT 37500;



CREATE FULLTEXT INDEX REVIEW_TRAINING_INDX ON "YELP"."REVIEW_TRAINING" ("TEXT")
configuration 'EXTRACTION_CORE_VOICEOFCUSTOMER'
TEXT ANALYSIS ON;

----SENTIMENT TABLE FOR DOING TEXT ANALYSIS-------
DROP TABLE "YELP"."REVIEW_TEST";
CREATE COLUMN TABLE "YELP"."REVIEW_TEST"
(
"REVIEW_ID" NVARCHAR(4000) PRIMARY KEY,
"TEXT" CLOB MEMORY THRESHOLD 1000,
"STARS" INTEGER CS_INT
);

INSERT INTO "YELP"."REVIEW_TEST"(REVIEW_ID, TEXT, STARS) 
SELECT  REVIEW_ID, TEXT, STARS FROM  "YELP"."REVIEW_VIEW"  LIMIT 12500 OFFSET 37500;

-- LIMIT 392316 OFFSET 1176948;

CREATE FULLTEXT INDEX REVIEW_TEST_INDX ON "YELP"."REVIEW_TEST" ("TEXT")
configuration 'EXTRACTION_CORE_VOICEOFCUSTOMER'
TEXT ANALYSIS ON;




--************CREATE TRAINING SENTIMENT TABLE*********


DROP TABLE "YELP"."SENTIMENT_TABLE_TRAINING";
CREATE COLUMN TABLE "YELP"."SENTIMENT_TABLE_TRAINING"
(
"REVIEW_ID" NVARCHAR(4000) PRIMARY KEY,
"ID" INTEGER not null generated by default as IDENTITY,
"SP" INTEGER,
"WP" INTEGER,
"WN" INTEGER,
"SN" INTEGER 
);


INSERT INTO "YELP"."SENTIMENT_TABLE_TRAINING"(REVIEW_ID, SP,WP, WN, SN) 
SELECT * FROM (
						SELECT "REVIEW_ID",
						SUM(CASE TA_TYPE WHEN 'StrongPositiveSentiment' THEN "total" END) AS SP,
						SUM(CASE TA_TYPE WHEN 'WeakPositiveSentiment' THEN "total" END) AS WP,
						SUM(CASE TA_TYPE WHEN 'WeakNegativeSentiment' THEN "total" END) AS WN,
						SUM(CASE TA_TYPE WHEN 'StrongNegativeSentiment' THEN "total" END) AS SN

						FROM(
								SELECT "REVIEW_ID", TA_TYPE, COUNT(*) AS "total"
								 FROM "YELP"."$TA_REVIEW_TRAINING_INDX"
								 WHERE  TA_TYPE = 'StrongPositiveSentiment' OR
										TA_TYPE = 'WeakPositiveSentiment' OR
										TA_TYPE = 'WeakNegativeSentiment' OR
										TA_TYPE = 'StrongNegativeSentiment'
								 GROUP BY "REVIEW_ID", TA_TYPE
							) 
								 GROUP BY "REVIEW_ID"
					)t;

commit;
------------------------REPLACE ? WITH 0--------------------			
UPDATE "YELP"."SENTIMENT_TABLE_TRAINING" SET SP = 0 WHERE SP IS NULL;
UPDATE "YELP"."SENTIMENT_TABLE_TRAINING" SET WP = 0 WHERE WP IS NULL;
UPDATE "YELP"."SENTIMENT_TABLE_TRAINING" SET WN = 0 WHERE WN IS NULL;
UPDATE "YELP"."SENTIMENT_TABLE_TRAINING" SET SN = 0 WHERE SN IS NULL;


DROP VIEW "YELP"."TRAINING_DATA";
CREATE VIEW "YELP"."TRAINING_DATA" AS SELECT
	 "SENTIMENT_TABLE_TRAINING".REVIEW_ID,
	 "SENTIMENT_TABLE_TRAINING".ID,
	 "SENTIMENT_TABLE_TRAINING".SP,
	 "SENTIMENT_TABLE_TRAINING".WP,
	 "SENTIMENT_TABLE_TRAINING".WN,
	 "SENTIMENT_TABLE_TRAINING".SN,
	 "REVIEW_VIEW".STARS 
FROM "YELP"."SENTIMENT_TABLE_TRAINING" 
LEFT JOIN "YELP"."REVIEW_VIEW" ON "SENTIMENT_TABLE_TRAINING"."REVIEW_ID" = "REVIEW_VIEW"."REVIEW_ID";


--************CREATE TEST SENTIMENT TABLE*********

DROP TABLE "YELP"."SENTIMENT_TABLE_TEST";
CREATE COLUMN TABLE "YELP"."SENTIMENT_TABLE_TEST"
(
"REVIEW_ID" NVARCHAR(4000) PRIMARY KEY,
"ID" INTEGER not null generated by default as IDENTITY,
"SP" INTEGER,
"WP" INTEGER,
"WN" INTEGER,
"SN" INTEGER 
);

INSERT INTO "YELP"."SENTIMENT_TABLE_TEST"(REVIEW_ID, SP,WP, WN, SN) 
SELECT * FROM (
						SELECT "REVIEW_ID",
						SUM(CASE TA_TYPE WHEN 'StrongPositiveSentiment' THEN "total" END) AS SP,
						SUM(CASE TA_TYPE WHEN 'WeakPositiveSentiment' THEN "total" END) AS WP,
						SUM(CASE TA_TYPE WHEN 'WeakNegativeSentiment' THEN "total" END) AS WN,
						SUM(CASE TA_TYPE WHEN 'StrongNegativeSentiment' THEN "total" END) AS SN

						FROM(
								SELECT "REVIEW_ID", TA_TYPE, COUNT(*) AS "total"
								 FROM "YELP"."$TA_REVIEW_TEST_INDX"
								 WHERE  TA_TYPE = 'StrongPositiveSentiment' OR
										TA_TYPE = 'WeakPositiveSentiment' OR
										TA_TYPE = 'WeakNegativeSentiment' OR
										TA_TYPE = 'StrongNegativeSentiment'
								 GROUP BY "REVIEW_ID", TA_TYPE
							) 
								 GROUP BY "REVIEW_ID"
					)t;
					
					
commit;

------------------------REPLACE ? WITH 0--------------------			
UPDATE "YELP"."SENTIMENT_TABLE_TEST" SET SP = 0 WHERE SP IS NULL;
UPDATE "YELP"."SENTIMENT_TABLE_TEST" SET WP = 0 WHERE WP IS NULL;
UPDATE "YELP"."SENTIMENT_TABLE_TEST" SET WN = 0 WHERE WN IS NULL;
UPDATE "YELP"."SENTIMENT_TABLE_TEST" SET SN = 0 WHERE SN IS NULL;

commit;

DROP VIEW "YELP"."TEST_DATA";
CREATE VIEW "YELP"."TEST_DATA" AS SELECT
	 "SENTIMENT_TABLE_TEST".REVIEW_ID,
	 "SENTIMENT_TABLE_TEST".ID,
	 "SENTIMENT_TABLE_TEST".SP,
	 "SENTIMENT_TABLE_TEST".WP,
	 "SENTIMENT_TABLE_TEST".WN,
	 "SENTIMENT_TABLE_TEST".SN
FROM "YELP"."SENTIMENT_TABLE_TEST" 
;


select count(*) from "YELP"."TRAINING_DATA"

--*************RESULT VALIDATION***********

DROP VIEW "YELP"."BUSINESS_VIEW";
CREATE VIEW "YELP"."BUSINESS_VIEW" AS
SELECT ID FROM 
"YELP"."REVIEW_VIEW";

-----------"PAL_DEV"."JOIN_TEST_BPNN"-------
DROP VIEW "PAL_DEV"."JOIN_TEST_BPNN";
CREATE VIEW "PAL_DEV"."JOIN_TEST_BPNN" AS 
SELECT 
"BPNN_P"."ID",
"BPNN_P"."CLASSLABEL",
"TEST_DATA"."REVIEW_ID"
FROM "PAL_DEV"."BPNN_P"
LEFT JOIN "YELP"."TEST_DATA" ON "PAL_DEV"."BPNN_P"."ID" = "YELP"."TEST_DATA"."ID";

----------"PAL_DEV"."COMPARE_BPNN"----------
DROP VIEW "PAL_DEV"."COMPARE_BPNN";
CREATE VIEW "PAL_DEV"."COMPARE_BPNN" AS 
SELECT 
"JOIN_TEST_BPNN"."ID",
"JOIN_TEST_BPNN"."CLASSLABEL" AS PREDICTION,
"JOIN_TEST_BPNN"."REVIEW_ID",
"REVIEW_VIEW"."STARS"
FROM "PAL_DEV"."JOIN_TEST_BPNN"
LEFT JOIN "YELP"."REVIEW_VIEW" ON "PAL_DEV"."JOIN_TEST_BPNN"."REVIEW_ID" = "YELP"."REVIEW_VIEW"."REVIEW_ID";


----------"PAL_DEV"."JOIN_TEST_DTC45"--------
DROP VIEW "PAL_DEV"."JOIN_TEST_DTC45";
CREATE VIEW "PAL_DEV"."JOIN_TEST_DTC45" AS 
SELECT 
"DTC45_R"."ID",
"DTC45_R"."PREDICTION",
"TEST_DATA"."REVIEW_ID"
FROM "PAL_DEV"."DTC45_R"
LEFT JOIN "YELP"."TEST_DATA" ON "PAL_DEV"."DTC45_R"."ID" = "YELP"."TEST_DATA"."ID";

----------"PAL_DEV"."COMPARE_DTC45"---------
DROP VIEW "PAL_DEV"."COMPARE_DTC45";
CREATE VIEW "PAL_DEV"."COMPARE_DTC45" AS 
SELECT 
"JOIN_TEST_DTC45"."ID",
"JOIN_TEST_DTC45"."PREDICTION",
"JOIN_TEST_DTC45"."REVIEW_ID",
"REVIEW_VIEW"."STARS"
FROM "PAL_DEV"."JOIN_TEST_DTC45"
LEFT JOIN "YELP"."REVIEW_VIEW" ON "PAL_DEV"."JOIN_TEST_DTC45"."REVIEW_ID" = "YELP"."REVIEW_VIEW"."REVIEW_ID";


----------"PAL_DEV"."JOIN_TEST_NB"--------
DROP VIEW "PAL_DEV"."JOIN_TEST_NB";
CREATE VIEW "PAL_DEV"."JOIN_TEST_NB" AS 
SELECT 
"PAL_NBCPREDICT_RESULTS_TBL"."ID",
"PAL_NBCPREDICT_RESULTS_TBL"."CLASS",
"TEST_DATA"."REVIEW_ID"
FROM "YELP"."PAL_NBCPREDICT_RESULTS_TBL"
LEFT JOIN "YELP"."TEST_DATA" ON "YELP"."PAL_NBCPREDICT_RESULTS_TBL"."ID" = "YELP"."TEST_DATA"."ID";

----------"PAL_DEV"."COMPARE_NB"---------
DROP VIEW "PAL_DEV"."COMPARE_NB";
CREATE VIEW "PAL_DEV"."COMPARE_NB" AS 
SELECT 
"JOIN_TEST_NB"."ID",
"JOIN_TEST_NB"."CLASS" AS PREDICTION,
"JOIN_TEST_NB"."REVIEW_ID",
"REVIEW_VIEW"."STARS"
FROM "PAL_DEV"."JOIN_TEST_NB"
LEFT JOIN "YELP"."REVIEW_VIEW" ON "PAL_DEV"."JOIN_TEST_NB"."REVIEW_ID" = "YELP"."REVIEW_VIEW"."REVIEW_ID";


select * from "PAL_DEV"."COMPARE_BPNN"

